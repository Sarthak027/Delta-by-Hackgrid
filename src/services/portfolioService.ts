import { 
  collection, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  getDocs, 
  getDoc,
  query, 
  where, 
  orderBy 
} from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';
import { db, storage } from '../config/firebase';
import { Portfolio } from '../types/portfolio';
import JSZip from 'jszip';
import html2canvas from 'html2canvas';

export class PortfolioService {
  static async createPortfolio(userId: string, portfolioData: Omit<Portfolio, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<string> {
    try {
      const docRef = await addDoc(collection(db, 'portfolios'), {
        ...portfolioData,
        userId,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      return docRef.id;
    } catch (error) {
      console.error('Error creating portfolio:', error);
      throw error;
    }
  }

  static async updatePortfolio(portfolioId: string, updates: Partial<Portfolio>): Promise<void> {
    try {
      const portfolioRef = doc(db, 'portfolios', portfolioId);
      await updateDoc(portfolioRef, {
        ...updates,
        updatedAt: new Date()
      });
    } catch (error) {
      console.error('Error updating portfolio:', error);
      throw error;
    }
  }

  static async deletePortfolio(portfolioId: string): Promise<void> {
    try {
      await deleteDoc(doc(db, 'portfolios', portfolioId));
    } catch (error) {
      console.error('Error deleting portfolio:', error);
      throw error;
    }
  }

  static async getUserPortfolios(userId: string): Promise<Portfolio[]> {
    try {
      const q = query(
        collection(db, 'portfolios'),
        where('userId', '==', userId),
        orderBy('updatedAt', 'desc')
      );
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Portfolio));
    } catch (error) {
      console.error('Error fetching portfolios:', error);
      throw error;
    }
  }

  static async getPortfolio(portfolioId: string): Promise<Portfolio | null> {
    try {
      const docRef = doc(db, 'portfolios', portfolioId);
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        return {
          id: docSnap.id,
          ...docSnap.data()
        } as Portfolio;
      }
      return null;
    } catch (error) {
      console.error('Error fetching portfolio:', error);
      throw error;
    }
  }

  static async uploadImage(file: File, path: string): Promise<string> {
    try {
      const storageRef = ref(storage, path);
      const snapshot = await uploadBytes(storageRef, file);
      return await getDownloadURL(snapshot.ref);
    } catch (error) {
      console.error('Error uploading image:', error);
      throw error;
    }
  }

  static async deleteImage(path: string): Promise<void> {
    try {
      const storageRef = ref(storage, path);
      await deleteObject(storageRef);
    } catch (error) {
      console.error('Error deleting image:', error);
      throw error;
    }
  }

  static async exportPortfolioAsZip(portfolio: Portfolio): Promise<Blob> {
    try {
      const zip = new JSZip();
      
      // Generate HTML content
      const htmlContent = this.generatePortfolioHTML(portfolio);
      zip.file('index.html', htmlContent);
      
      // Generate CSS
      const cssContent = this.generatePortfolioCSS(portfolio);
      zip.file('styles.css', cssContent);
      
      // Add assets folder
      const assetsFolder = zip.folder('assets');
      
      // Add a README file
      const readmeContent = `# ${portfolio.title}

This is your exported portfolio website.

## How to use:
1. Extract all files to a folder
2. Open index.html in your web browser
3. Upload to any web hosting service

## Customization:
- Edit index.html to modify content
- Edit styles.css to change styling
- Replace images in the assets folder

Generated by Create Portfolio - https://createportfolio.com
`;
      zip.file('README.md', readmeContent);
      
      return await zip.generateAsync({ type: 'blob' });
    } catch (error) {
      console.error('Error exporting portfolio:', error);
      throw error;
    }
  }

  private static generatePortfolioHTML(portfolio: Portfolio): string {
    const { settings, sections } = portfolio;
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${settings.seoTitle || portfolio.title}</title>
    <meta name="description" content="${settings.seoDescription || portfolio.description}">
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <header class="header">
        <nav class="nav">
            <div class="nav-brand">
                ${settings.logoUrl ? `<img src="${settings.logoUrl}" alt="Logo" class="logo">` : ''}
                <h1>${portfolio.title}</h1>
            </div>
            <ul class="nav-links">
                ${sections.filter(s => s.isVisible).map(section => 
                  `<li><a href="#${section.type}">${section.title}</a></li>`
                ).join('')}
            </ul>
        </nav>
    </header>

    <main>
        ${sections
          .filter(section => section.isVisible)
          .sort((a, b) => a.order - b.order)
          .map(section => this.generateSectionHTML(section))
          .join('')}
    </main>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; ${new Date().getFullYear()} ${portfolio.title}. All rights reserved.</p>
            <div class="social-links">
                ${Object.entries(settings.socialLinks || {})
                  .filter(([_, url]) => url)
                  .map(([platform, url]) => 
                    `<a href="${url}" target="_blank" rel="noopener noreferrer">${platform}</a>`
                  ).join('')}
            </div>
        </div>
    </footer>

    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    </script>
</body>
</html>`;
  }

  private static generateSectionHTML(section: any): string {
    switch (section.type) {
      case 'hero':
        return `
          <section id="hero" class="hero-section">
            <div class="container">
              <h1 class="hero-title">${section.content.title || ''}</h1>
              <p class="hero-subtitle">${section.content.subtitle || ''}</p>
              ${section.content.ctaText ? `<a href="${section.content.ctaLink || '#'}" class="cta-button">${section.content.ctaText}</a>` : ''}
            </div>
          </section>`;
      
      case 'about':
        return `
          <section id="about" class="about-section">
            <div class="container">
              <h2>${section.title}</h2>
              <div class="about-content">
                ${section.content.image ? `<img src="${section.content.image}" alt="About" class="about-image">` : ''}
                <div class="about-text">
                  <p>${section.content.description || ''}</p>
                </div>
              </div>
            </div>
          </section>`;
      
      case 'projects':
        return `
          <section id="projects" class="projects-section">
            <div class="container">
              <h2>${section.title}</h2>
              <div class="projects-grid">
                ${(section.content.projects || []).map((project: any) => `
                  <div class="project-card">
                    ${project.imageUrl ? `<img src="${project.imageUrl}" alt="${project.title}" class="project-image">` : ''}
                    <div class="project-content">
                      <h3>${project.title}</h3>
                      <p>${project.description}</p>
                      <div class="project-links">
                        ${project.liveUrl ? `<a href="${project.liveUrl}" target="_blank">Live Demo</a>` : ''}
                        ${project.githubUrl ? `<a href="${project.githubUrl}" target="_blank">GitHub</a>` : ''}
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </section>`;
      
      default:
        return `
          <section id="${section.type}" class="section">
            <div class="container">
              <h2>${section.title}</h2>
              <div class="section-content">
                ${JSON.stringify(section.content)}
              </div>
            </div>
          </section>`;
    }
  }

  private static generatePortfolioCSS(portfolio: Portfolio): string {
    const { settings } = portfolio;
    
    return `
/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #fff;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header Styles */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    border-bottom: 1px solid #e5e7eb;
}

.nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
}

.nav-brand {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.logo {
    height: 40px;
    width: auto;
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-links a {
    text-decoration: none;
    color: #374151;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: ${settings.primaryColor || '#2563eb'};
}

/* Hero Section */
.hero-section {
    padding: 120px 0 80px;
    background: linear-gradient(135deg, ${settings.primaryColor || '#2563eb'}10, ${settings.secondaryColor || '#7c3aed'}10);
    text-align: center;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #1f2937;
}

.hero-subtitle {
    font-size: 1.25rem;
    color: #6b7280;
    margin-bottom: 2rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

.cta-button {
    display: inline-block;
    background: ${settings.primaryColor || '#2563eb'};
    color: white;
    padding: 12px 32px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.cta-button:hover {
    background: ${settings.secondaryColor || '#1d4ed8'};
    transform: translateY(-2px);
}

/* Section Styles */
.section {
    padding: 80px 0;
}

.section h2 {
    font-size: 2.5rem;
    font-weight: 700;
    text-align: center;
    margin-bottom: 3rem;
    color: #1f2937;
}

/* About Section */
.about-section {
    padding: 80px 0;
    background: #f9fafb;
}

.about-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 3rem;
    align-items: center;
}

.about-image {
    width: 100%;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
}

.about-text {
    font-size: 1.125rem;
    color: #4b5563;
    line-height: 1.8;
}

/* Projects Section */
.projects-section {
    padding: 80px 0;
}

.projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.project-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 25px rgba(0, 0, 0, 0.1);
}

.project-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.project-content {
    padding: 1.5rem;
}

.project-content h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #1f2937;
}

.project-content p {
    color: #6b7280;
    margin-bottom: 1rem;
}

.project-links {
    display: flex;
    gap: 1rem;
}

.project-links a {
    color: ${settings.primaryColor || '#2563eb'};
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
}

.project-links a:hover {
    color: ${settings.secondaryColor || '#1d4ed8'};
}

/* Footer */
.footer {
    background: #1f2937;
    color: white;
    padding: 2rem 0;
    text-align: center;
}

.footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

.social-links {
    display: flex;
    gap: 1rem;
}

.social-links a {
    color: #d1d5db;
    text-decoration: none;
    transition: color 0.3s ease;
}

.social-links a:hover {
    color: ${settings.primaryColor || '#2563eb'};
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero-title {
        font-size: 2.5rem;
    }
    
    .about-content {
        grid-template-columns: 1fr;
        text-align: center;
    }
    
    .projects-grid {
        grid-template-columns: 1fr;
    }
    
    .footer-content {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-links {
        flex-wrap: wrap;
        justify-content: center;
    }
}
`;
  }
}